<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>三水的博客</title>
  <subtitle>三水的个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-30T09:56:57.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>三水（hmily）</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不错的zsh配置</title>
    <link href="http://yoursite.com/2017/08/30/%E4%B8%8D%E9%94%99%E7%9A%84zsh%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/08/30/不错的zsh配置/</id>
    <published>2017-08-30T09:48:52.000Z</published>
    <updated>2017-08-30T09:56:57.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>```
   #color{{{
		autoload colors
		colors
 
	for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
	eval _$color='%{$terminfo[bold]$fg[${(L)color}]%}'
	eval $color='%{$fg[${(L)color}]%}'
	(( count = $count + 1 ))
	done
	FINISH="%{$terminfo[sgr0]%}"
	#}}}

#命令提示符
RPROMPT=$(echo &quot;$RED%D %T$FINISH&quot;)
PROMPT=$(echo &quot;$CYAN%n@$YELLOW%M:$GREEN%/$_YELLOW&gt;$FINISH &quot;)

#PROMPT=$(echo &quot;$BLUE%M$GREEN%/
#$CYAN%n@$BLUE%M:$GREEN%/$_YELLOW&gt;&gt;&gt;$FINISH &quot;)
#标题栏、任务栏样式{{{
	case $TERM in (*xterm*|*rxvt*|(dt|k|E)term)
	precmd () { print -Pn "\e]0;%n@%M//%/\a" }
	preexec () { print -Pn "\e]0;%n@%M//%/\ $1\a" }
	;;
	esac
	#}}}

#编辑器
export EDITOR=vim
#输入法
export XMODIFIERS=&quot;@im=ibus&quot;
export QT_MODULE=ibus
export GTK_MODULE=ibus
#关于历史纪录的配置 {{{
	#历史纪录条目数量
	export HISTSIZE=10000
	#注销后保存的历史纪录条目数量
	export SAVEHIST=10000
	#历史纪录文件
    export HISTFILE=~/.zhistory
	#以附加的方式写入历史纪录
	setopt INC_APPEND_HISTORY
	#如果连续输入的命令相同，历史纪录中只保留一个
	setopt HIST_IGNORE_DUPS
	#为历史纪录中的命令添加时间戳
	setopt EXTENDED_HISTORY      
	 
	#启用 cd 命令的历史纪录，cd -[TAB]进入历史路径
	setopt AUTO_PUSHD
	#相同的历史路径只保留一个
	setopt PUSHD_IGNORE_DUPS
	 
	#在命令前添加空格，不将此命令添加到纪录文件中
	#setopt HIST_IGNORE_SPACE
	#}}}

#每个目录使用独立的历史纪录{{{
	cd() {
	builtin cd "$@"                             # do actual cd
	fc -W                                       # write current history  file
	local HISTDIR="$HOME/.zsh_history$PWD"      # use nested folders for history
	if  [ ! -d "$HISTDIR" ] ; then          # create folder if needed
	mkdir -p "$HISTDIR"
	fi
	export HISTFILE="$HISTDIR/zhistory"     # set new history file
	touch $HISTFILE
	local ohistsize=$HISTSIZE
	HISTSIZE=0                              # Discard previous dir's history
	HISTSIZE=$ohistsize                     # Prepare for new dir's history
	fc -R                                       #read from current histfile
	}
	mkdir -p $HOME/.zsh_history$PWD
	export HISTFILE="$HOME/.zsh_history$PWD/zhistory"
	 
	function allhistory { cat $(find $HOME/.zsh_history -name zhistory) }
	function convhistory {
	sort $1 | uniq |
	sed 's/^:\([ 0-9]*\):[0-9]*;\(.*\)/\1::::::\2/' |
	awk -F"::::::" '{ $1=strftime("%Y-%m-%d %T",$1) "|"; print }'
	}
	#使用 histall 命令查看全部历史纪录
	function histall { convhistory =(allhistory) |
	sed '/^.\{20\} *cd/i\\' }
	#使用 hist 查看当前目录历史纪录
	function hist { convhistory $HISTFILE }
	 
	#全部历史纪录 top50
	function top50 { allhistory | awk -F':[ 0-9]*:[0-9]*;' '{ $1="" ; print }' | sed 's/ /\n/g' | sed '/^$/d' | sort | uniq -c | sort -nr | head -n 50 }
	 
	#}}}

#杂项 {{{
	#允许在交互模式中使用注释  例如：
	#cmd #这是注释
	setopt INTERACTIVE_COMMENTS      
	 
	#启用自动 cd，输入目录名回车进入目录
	#稍微有点混乱，不如 cd 补全实用
	setopt AUTO_CD
	 
	#扩展路径
	#/v/c/p/p => /var/cache/pacman/pkg
	setopt complete_in_word
	 
	#禁用 core dumps
	limit coredumpsize 0
	 
	#Emacs风格 键绑定
	bindkey -e
	#bindkey -v
	#设置 [DEL]键 为向后删除
	#bindkey "\e[3~" delete-char
	 
	#以下字符视为单词的一部分
	WORDCHARS='*?_-[]~=&;!#$%^(){}<>'
	#}}}

#自动补全功能 {{{
	setopt AUTO_LIST
	setopt AUTO_MENU
	#开启此选项，补全时会直接选中菜单项
	#setopt MENU_COMPLETE
	 
	autoload -U compinit
	compinit
	 
	#自动补全缓存
	#zstyle ':completion::complete:*' use-cache on
	#zstyle ':completion::complete:*' cache-path .zcache
	#zstyle ':completion:*:cd:*' ignore-parents parent pwd
	 
	#自动补全选项
	zstyle ':completion:*' verbose yes
	zstyle ':completion:*' menu select
	zstyle ':completion:*:*:default' force-list always
	zstyle ':completion:*' select-prompt '%SSelect:  lines: %L  matches: %M  [%p]'
	 
	zstyle ':completion:*:match:*' original only
	zstyle ':completion::prefix-1:*' completer _complete
	zstyle ':completion:predict:*' completer _complete
	zstyle ':completion:incremental:*' completer _complete _correct
	zstyle ':completion:*' completer _complete _prefix _correct _prefix _match _approximate
	 
	#路径补全
	zstyle ':completion:*' expand 'yes'
	zstyle ':completion:*' squeeze-shlashes 'yes'
	zstyle ':completion::complete:*' '\\'
	 
	#彩色补全菜单
	eval $(dircolors -b)
	export ZLSCOLORS="${LS_COLORS}"
	zmodload zsh/complist
	zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
	zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
	 
	#修正大小写
	zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'
	#错误校正
	zstyle ':completion:*' completer _complete _match _approximate
	zstyle ':completion:*:match:*' original only
	zstyle ':completion:*:approximate:*' max-errors 1 numeric
	 
	#kill 命令补全
	compdef pkill=kill
	compdef pkill=killall
	zstyle ':completion:*:*:kill:*' menu yes select
	zstyle ':completion:*:*:*:*:processes' force-list always
	zstyle ':completion:*:processes' command 'ps -au$USER'
	 
	#补全类型提示分组
	zstyle ':completion:*:matches' group 'yes'
	zstyle ':completion:*' group-name ''
	zstyle ':completion:*:options' description 'yes'
	zstyle ':completion:*:options' auto-description '%d'
	zstyle ':completion:*:descriptions' format $'\e[01;33m -- %d --\e[0m'
	zstyle ':completion:*:messages' format $'\e[01;35m -- %d --\e[0m'
	zstyle ':completion:*:warnings' format $'\e[01;31m -- No Matches Found --\e[0m'
	zstyle ':completion:*:corrections' format $'\e[01;32m -- %d (errors: %e) --\e[0m'
	 
	# cd ~ 补全顺序
	zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
	#}}}

##行编辑高亮模式 {{{
	# Ctrl+@ 设置标记，标记和光标点之间为 region
	zle_highlight=(region:bg=magenta #选中区域
	special:bold      #特殊字符
	isearch:underline)#搜索时使用的关键字
	#}}}

##空行(光标在行首)补全 &quot;cd &quot; {{{
	user-complete(){
	case $BUFFER in
	"" )                       # 空行填入 "cd "
	BUFFER="cd "
	zle end-of-line
	zle expand-or-complete
	;;
	"cd --" )                  # "cd --" 替换为 "cd +"
	BUFFER="cd +"
	zle end-of-line
	zle expand-or-complete
	;;
	"cd +-" )                  # "cd +-" 替换为 "cd -"
	BUFFER="cd -"
	zle end-of-line
	zle expand-or-complete
	;;
	* )
	zle expand-or-complete
	;;
	esac
	}
	zle -N user-complete
	bindkey "\t" user-complete
	#}}}

##在命令前插入 sudo {{{
	#定义功能
	sudo-command-line() {
	[[ -z $BUFFER ]] && zle up-history
	[[ $BUFFER != sudo\ * ]] && BUFFER="sudo $BUFFER"
	zle end-of-line                 #光标移动到行末
	}
	zle -N sudo-command-line
	#定义快捷键为： [Esc] [Esc]
	bindkey "\e\e" sudo-command-line
	#}}}

#命令别名 {{{
	#alias cp='cp -i'
	#alias mv='mv -i'
	#alias rm='rm -i'
	#alias ls='ls -F --color=auto'
	#alias ll='ls -al'
	#alias grep='grep --color=auto'
	#alias la='ls -a'
	#alias pacman='sudo pacman-color'
	#alias p='sudo pacman-color'
	#alias y='yaourt'
	#alias h='htop'
	#alias vim='sudo vim'
	 
	#[Esc][h] man 当前命令时，显示简短说明
	alias run-help >&/dev/null && unalias run-help
	autoload run-help
	 
	#历史命令 top10
	alias top10='print -l  ${(o)history%% *} | uniq -c | sort -nr | head -n 10'
	#}}}


##for Emacs {{{
	#在 Emacs终端 中使用 Zsh 的一些设置 不推荐在 Emacs 中使用它
	#if [[ "$TERM" == "dumb" ]]; then
	#setopt No_zle
	#PROMPT='%n@%M %/
	#>>'
	#alias ls='ls -F'
	#fi
	#}}}

#{{{自定义补全
	#补全 ping
	zstyle ':completion:*:ping:*' hosts 192.168.1.{1,50,51,100,101} www.google.com
	 
	#补全 ssh scp sftp 等
	#zstyle -e ':completion::*:*:*:hosts' hosts 'reply=(${=${${(f)"$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) /dev/null)"}%%[# ]*}//,/ })'
	#}}}

#{{{ F1 计算器
	arith-eval-echo() {
	LBUFFER="${LBUFFER}echo \$(( "
	RBUFFER=" ))$RBUFFER"
	}
	zle -N arith-eval-echo
	bindkey "^[[11~" arith-eval-echo
	#}}}

####{{{
	function timeconv { date -d @$1 +"%Y-%m-%d %T" }
	 
	# }}}

zmodload zsh/mathfunc
autoload -U zsh-mime-setup
zsh-mime-setup
setopt EXTENDED_GLOB
#autoload -U promptinit
#promptinit
#prompt redhat

setopt correctall
autoload compinstall

#漂亮又实用的命令高亮界面
setopt extended_glob
 TOKENS_FOLLOWED_BY_COMMANDS=(&apos;|&apos; &apos;||&apos; &apos;;&apos; &apos;&amp;&apos; &apos;&amp;&amp;&apos; &apos;sudo&apos; &apos;do&apos; &apos;time&apos; &apos;strace&apos;)

 recolor-cmd() {
     region_highlight=()
     colorize=true
     start_pos=0
     for arg in ${(z)BUFFER}; do
         ((start_pos+=$}))
         ((end_pos=$start_pos+${#arg}))
         if $colorize; then
             colorize=false
             res=$(LC_ALL=C builtin type $arg 2&gt;/dev/null)
             case $res in
                 *&apos;reserved word&apos;*)   style=&quot;fg=magenta,bold&quot;;;
                 *&apos;alias for&apos;*)       style=&quot;fg=cyan,bold&quot;;;
                 *&apos;shell builtin&apos;*)   style=&quot;fg=yellow,bold&quot;;;
                 *&apos;shell function&apos;*)  style=&apos;fg=green,bold&apos;;;
                 *&quot;$arg is&quot;*)
                     [[ $arg = &apos;sudo&apos; ]] &amp;&amp; style=&quot;fg=red,bold&quot; || style=&quot;fg=blue,bold&quot;;;
                 *)                   style=&apos;none,bold&apos;;;
             esac
             region_highlight+=(&quot;$start_pos $end_pos $style&quot;)
         fi
         [[ ${${TOKENS_FOLLOWED_BY_COMMANDS[(r)${arg//|/\|}]}:+yes} = &apos;yes&apos; ]] &amp;&amp; colorize=true
         start_pos=$end_pos
     done
 }
check-cmd-self-insert() { zle .self-insert &amp;&amp; recolor-cmd }
 check-cmd-backward-delete-char() { zle .backward-delete-char &amp;&amp; recolor-cmd }

 zle -N self-insert check-cmd-self-insert
 zle -N backward-delete-char check-cmd-backward-delete-char
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;```
   #color{{{
		autoload colors
		colors
 
	for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
	eval _$color=&#39;%{$termin
    
    </summary>
    
    
      <category term="---shell ---zsh" scheme="http://yoursite.com/tags/shell-zsh/"/>
    
  </entry>
  
  <entry>
    <title>Shell 学习</title>
    <link href="http://yoursite.com/2017/08/18/Shell-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/08/18/Shell-学习/</id>
    <published>2017-08-18T08:48:31.000Z</published>
    <updated>2017-08-18T08:49:29.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Xcode创建.Framework相关</title>
    <link href="http://yoursite.com/2017/08/01/Xcode%E5%88%9B%E5%BB%BAFramework%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2017/08/01/Xcode创建Framework相关/</id>
    <published>2017-08-01T06:56:35.000Z</published>
    <updated>2017-08-02T09:34:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iOS的静态库"><a href="#iOS的静态库" class="headerlink" title="iOS的静态库"></a>iOS的静态库</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">iOS</span>的静态库分两种：<span class="selector-class">.a</span>和<span class="selector-class">.framework</span>; 动态库<span class="selector-class">.framework</span></div><div class="line"></div><div class="line">静态库：链接时，静态库会被完整的复制到可执行文件中，被多次使用就有多份冗余拷贝。例如我们在程序使用友盟<span class="selector-class">.a</span>，另外一个应用也使用了友盟<span class="selector-class">.a</span>。这样整个系统里就有两个友盟<span class="selector-class">.a</span></div><div class="line"></div><div class="line">动态库：链接时不复制，在程序运行时由系统动态加载到内存，供程序调用，系统只加载一次，多个程序共用，节省内存。系统提供的库基本上都属于此类</div></pre></td></tr></table></figure>
<p><strong>参考文章：</strong></p>
<p><a href="http://jiapumin.iteye.com/blog/2119102" target="_blank" rel="external">IOS合并lib(.a)库的终极可用方法(可用于解决duplicate symbol静态库冲突)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;iOS的静态库&quot;&gt;&lt;a href=&quot;#iOS的静态库&quot; class=&quot;headerlink&quot; title=&quot;iOS的静态库&quot;&gt;&lt;/a&gt;iOS的静态库&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
    
    </summary>
    
    
      <category term="Xcode" scheme="http://yoursite.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>hexo-常用命令</title>
    <link href="http://yoursite.com/2017/07/25/hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/07/25/hexo-常用命令/</id>
    <published>2017-07-25T06:49:33.000Z</published>
    <updated>2017-07-27T10:15:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo "></a>Hexo </h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> install hexo - g <span class="comment">#安装  </span></div><div class="line"><span class="built_in">npm</span> update hexo - g <span class="comment">#升级  </span></div><div class="line">hexo init <span class="comment">#初始化</span></div></pre></td></tr></table></figure>
<a id="more"></a> 
<h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo n <span class="string">"我的博客"</span> == hexo new <span class="string">"我的博客"</span> #新建文章  </div><div class="line">hexo p == hexo publish </div><div class="line">hexo g == hexo generate#生成 </div><div class="line">hexo s == hexo<span class="built_in"> server </span>#启动服务预览 </div><div class="line">hexo d == hexo deploy#部署</div></pre></td></tr></table></figure>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">hexo<span class="built_in"> server </span>#Hexo 会监视文件变动并自动更新，您无须重启服务器。 </div><div class="line">hexo<span class="built_in"> server </span>-s #静态模式  </div><div class="line">hexo<span class="built_in"> server </span>-p 5000 #更改端口  </div><div class="line">hexo<span class="built_in"> server </span>-i 192.168.1.1 #自定义<span class="built_in"> IP </span> </div><div class="line"></div><div class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令  </div><div class="line">hexo g #生成静态网页  </div><div class="line">hexo d #开始部署</div></pre></td></tr></table></figure>
<h2 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">generate</span> #使用 hexo 生成静态文件快速而且简单</div><div class="line">hexo <span class="keyword">generate</span> --watch #监视文件变动</div></pre></td></tr></table></figure>
<h2 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">两个命令的作用是相同的</div><div class="line">hexo generate --deploy</div><div class="line"><span class="section">hexo deploy --generate</span></div><div class="line">----------------------------</div><div class="line">hexo deploy -g</div><div class="line">hexo server -g</div></pre></td></tr></table></figure>
<h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo publish <span class="string">[layout]</span> &lt;title&gt;</div></pre></td></tr></table></figure>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="string">"新文章"</span> <span class="meta">#新建文章</span></div><div class="line">hexo <span class="keyword">new</span> page <span class="string">"新文章"</span> <span class="meta">#新加页面</span></div><div class="line">hexo generate <span class="meta">#生成静态页面至public目录</span></div><div class="line">hexo <span class="keyword">server</span> <span class="meta">#开启预览访问端口(默认端口4000,'ctrl + c' 关闭server)</span></div><div class="line">hexo deploy <span class="meta">#将.deploy目录部署到Github</span></div></pre></td></tr></table></figure>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="type"></span>[layout] &lt;title&gt;</div><div class="line">hexo <span class="keyword">new</span> <span class="type">photo</span> <span class="string">"my gallery"</span></div><div class="line">hexo <span class="keyword">new</span> <span class="type"></span>"Hello World<span class="string">" --lang tw</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>layout</td>
<td>布局</td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>date</td>
<td>文件简历日期</td>
</tr>
</tbody>
</table>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">title: 使用Hexo搭建个人博客</div><div class="line">layout: post</div><div class="line">date: 2014<span class="string">-03</span><span class="string">-03</span> 19:07:43</div><div class="line">comments: true</div><div class="line">categories: Blog</div><div class="line"><span class="keyword">tags:</span> [Hexo]</div><div class="line">keywords: Hexo, Blog</div><div class="line">description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</div></pre></td></tr></table></figure>
<h2 id="设置文章摘要"><a href="#设置文章摘要" class="headerlink" title="设置文章摘要"></a>设置文章摘要</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">以上是文章摘要<span class="comment">&lt;!--more--&gt;</span> 以下是余下全文</div></pre></td></tr></table></figure>
<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo new<span class="built_in"> page </span>&lt;title&gt;</div><div class="line">hexo new post &lt;title&gt;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>:title</td>
<td>标题</td>
</tr>
<tr>
<td>:year</td>
<td>建立的年份（4 位数）</td>
</tr>
<tr>
<td>:month</td>
<td>建立的月份（2 位数）</td>
</tr>
<tr>
<td>:i_month</td>
<td>建立的月份（去掉开头的零）</td>
</tr>
<tr>
<td>:day</td>
<td>建立的日期（2 位数）</td>
</tr>
<tr>
<td>:i_day</td>
<td>建立的日期（去掉开头的零）</td>
</tr>
</tbody>
</table>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean #清理</div><div class="line">hexo g #生成</div><div class="line">hexo d #部署， #可与hexo g 合并为hexo d -g</div></pre></td></tr></table></figure>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>1、RSS不显示</p>
<p>#####安装RSS插件<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></div></pre></td></tr></table></figure></p>
<p>#####开起RSS功能<br>编辑hexo/_config.yml,添加如下代码：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rss: /atom.<span class="keyword">xml</span> <span class="title">#rss</span>地址，默认即可</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo&quot;&gt;&lt;a href=&quot;#Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hexo &quot;&gt;&lt;/a&gt;Hexo &lt;/h2&gt;&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;npm&lt;/span&gt; install hexo - g &lt;span class=&quot;comment&quot;&gt;#安装  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;npm&lt;/span&gt; update hexo - g &lt;span class=&quot;comment&quot;&gt;#升级  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo init &lt;span class=&quot;comment&quot;&gt;#初始化&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="命令行" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
