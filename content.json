[{"title":"不错的zsh配置","date":"2017-08-30T09:48:52.000Z","path":"2017/08/30/不错的zsh配置/","text":"#color{{{ autoload colors colors for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do eval _$color='%{$terminfo[bold]$fg[${(L)color}]%}' eval $color='%{$fg[${(L)color}]%}' (( count = $count + 1 )) done FINISH=\"%{$terminfo[sgr0]%}\" #}}} &lt;!--more--&gt; #命令提示符 RPROMPT=$(echo &quot;$RED%D %T$FINISH&quot;) PROMPT=$(echo &quot;$CYAN%n@$YELLOW%M:$GREEN%/$_YELLOW&gt;$FINISH &quot;) #PROMPT=$(echo &quot;$BLUE%M$GREEN%/ #$CYAN%n@$BLUE%M:$GREEN%/$_YELLOW&gt;&gt;&gt;$FINISH &quot;) #标题栏、任务栏样式{{{ case $TERM in (*xterm*|*rxvt*|(dt|k|E)term) precmd () { print -Pn \"\\e]0;%n@%M//%/\\a\" } preexec () { print -Pn \"\\e]0;%n@%M//%/\\ $1\\a\" } ;; esac #}}} #编辑器 export EDITOR=vim #输入法 export XMODIFIERS=&quot;@im=ibus&quot; export QT_MODULE=ibus export GTK_MODULE=ibus #关于历史纪录的配置 {{{ #历史纪录条目数量 export HISTSIZE=10000 #注销后保存的历史纪录条目数量 export SAVEHIST=10000 #历史纪录文件 export HISTFILE=~/.zhistory #以附加的方式写入历史纪录 setopt INC_APPEND_HISTORY #如果连续输入的命令相同，历史纪录中只保留一个 setopt HIST_IGNORE_DUPS #为历史纪录中的命令添加时间戳 setopt EXTENDED_HISTORY #启用 cd 命令的历史纪录，cd -[TAB]进入历史路径 setopt AUTO_PUSHD #相同的历史路径只保留一个 setopt PUSHD_IGNORE_DUPS #在命令前添加空格，不将此命令添加到纪录文件中 #setopt HIST_IGNORE_SPACE #}}} #每个目录使用独立的历史纪录{{{ cd() { builtin cd \"$@\" # do actual cd fc -W # write current history file local HISTDIR=\"$HOME/.zsh_history$PWD\" # use nested folders for history if [ ! -d \"$HISTDIR\" ] ; then # create folder if needed mkdir -p \"$HISTDIR\" fi export HISTFILE=\"$HISTDIR/zhistory\" # set new history file touch $HISTFILE local ohistsize=$HISTSIZE HISTSIZE=0 # Discard previous dir's history HISTSIZE=$ohistsize # Prepare for new dir's history fc -R #read from current histfile } mkdir -p $HOME/.zsh_history$PWD export HISTFILE=\"$HOME/.zsh_history$PWD/zhistory\" function allhistory { cat $(find $HOME/.zsh_history -name zhistory) } function convhistory { sort $1 | uniq | sed 's/^:\\([ 0-9]*\\):[0-9]*;\\(.*\\)/\\1::::::\\2/' | awk -F\"::::::\" '{ $1=strftime(\"%Y-%m-%d %T\",$1) \"|\"; print }' } #使用 histall 命令查看全部历史纪录 function histall { convhistory =(allhistory) | sed '/^.\\{20\\} *cd/i\\\\' } #使用 hist 查看当前目录历史纪录 function hist { convhistory $HISTFILE } #全部历史纪录 top50 function top50 { allhistory | awk -F':[ 0-9]*:[0-9]*;' '{ $1=\"\" ; print }' | sed 's/ /\\n/g' | sed '/^$/d' | sort | uniq -c | sort -nr | head -n 50 } #}}} #杂项 {{{ #允许在交互模式中使用注释 例如： #cmd #这是注释 setopt INTERACTIVE_COMMENTS #启用自动 cd，输入目录名回车进入目录 #稍微有点混乱，不如 cd 补全实用 setopt AUTO_CD #扩展路径 #/v/c/p/p => /var/cache/pacman/pkg setopt complete_in_word #禁用 core dumps limit coredumpsize 0 #Emacs风格 键绑定 bindkey -e #bindkey -v #设置 [DEL]键 为向后删除 #bindkey \"\\e[3~\" delete-char #以下字符视为单词的一部分 WORDCHARS='*?_-[]~=&;!#$%^(){}' #}}} #自动补全功能 {{{ setopt AUTO_LIST setopt AUTO_MENU #开启此选项，补全时会直接选中菜单项 #setopt MENU_COMPLETE autoload -U compinit compinit #自动补全缓存 #zstyle ':completion::complete:*' use-cache on #zstyle ':completion::complete:*' cache-path .zcache #zstyle ':completion:*:cd:*' ignore-parents parent pwd #自动补全选项 zstyle ':completion:*' verbose yes zstyle ':completion:*' menu select zstyle ':completion:*:*:default' force-list always zstyle ':completion:*' select-prompt '%SSelect: lines: %L matches: %M [%p]' zstyle ':completion:*:match:*' original only zstyle ':completion::prefix-1:*' completer _complete zstyle ':completion:predict:*' completer _complete zstyle ':completion:incremental:*' completer _complete _correct zstyle ':completion:*' completer _complete _prefix _correct _prefix _match _approximate #路径补全 zstyle ':completion:*' expand 'yes' zstyle ':completion:*' squeeze-shlashes 'yes' zstyle ':completion::complete:*' '\\\\' #彩色补全菜单 eval $(dircolors -b) export ZLSCOLORS=\"${LS_COLORS}\" zmodload zsh/complist zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS} zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31' #修正大小写 zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' #错误校正 zstyle ':completion:*' completer _complete _match _approximate zstyle ':completion:*:match:*' original only zstyle ':completion:*:approximate:*' max-errors 1 numeric #kill 命令补全 compdef pkill=kill compdef pkill=killall zstyle ':completion:*:*:kill:*' menu yes select zstyle ':completion:*:*:*:*:processes' force-list always zstyle ':completion:*:processes' command 'ps -au$USER' #补全类型提示分组 zstyle ':completion:*:matches' group 'yes' zstyle ':completion:*' group-name '' zstyle ':completion:*:options' description 'yes' zstyle ':completion:*:options' auto-description '%d' zstyle ':completion:*:descriptions' format $'\\e[01;33m -- %d --\\e[0m' zstyle ':completion:*:messages' format $'\\e[01;35m -- %d --\\e[0m' zstyle ':completion:*:warnings' format $'\\e[01;31m -- No Matches Found --\\e[0m' zstyle ':completion:*:corrections' format $'\\e[01;32m -- %d (errors: %e) --\\e[0m' # cd ~ 补全顺序 zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand' #}}} ##行编辑高亮模式 {{{ # Ctrl+@ 设置标记，标记和光标点之间为 region zle_highlight=(region:bg=magenta #选中区域 special:bold #特殊字符 isearch:underline)#搜索时使用的关键字 #}}} ##空行(光标在行首)补全 &quot;cd &quot; {{{ user-complete(){ case $BUFFER in \"\" ) # 空行填入 \"cd \" BUFFER=\"cd \" zle end-of-line zle expand-or-complete ;; \"cd --\" ) # \"cd --\" 替换为 \"cd +\" BUFFER=\"cd +\" zle end-of-line zle expand-or-complete ;; \"cd +-\" ) # \"cd +-\" 替换为 \"cd -\" BUFFER=\"cd -\" zle end-of-line zle expand-or-complete ;; * ) zle expand-or-complete ;; esac } zle -N user-complete bindkey \"\\t\" user-complete #}}} ##在命令前插入 sudo {{{ #定义功能 sudo-command-line() { [[ -z $BUFFER ]] && zle up-history [[ $BUFFER != sudo\\ * ]] && BUFFER=\"sudo $BUFFER\" zle end-of-line #光标移动到行末 } zle -N sudo-command-line #定义快捷键为： [Esc] [Esc] bindkey \"\\e\\e\" sudo-command-line #}}} #命令别名 {{{ #alias cp='cp -i' #alias mv='mv -i' #alias rm='rm -i' #alias ls='ls -F --color=auto' #alias ll='ls -al' #alias grep='grep --color=auto' #alias la='ls -a' #alias pacman='sudo pacman-color' #alias p='sudo pacman-color' #alias y='yaourt' #alias h='htop' #alias vim='sudo vim' #[Esc][h] man 当前命令时，显示简短说明 alias run-help >&/dev/null && unalias run-help autoload run-help #历史命令 top10 alias top10='print -l ${(o)history%% *} | uniq -c | sort -nr | head -n 10' #}}} ##for Emacs {{{ #在 Emacs终端 中使用 Zsh 的一些设置 不推荐在 Emacs 中使用它 #if [[ \"$TERM\" == \"dumb\" ]]; then #setopt No_zle #PROMPT='%n@%M %/ #>>' #alias ls='ls -F' #fi #}}} #{{{自定义补全 #补全 ping zstyle ':completion:*:ping:*' hosts 192.168.1.{1,50,51,100,101} www.google.com #补全 ssh scp sftp 等 #zstyle -e ':completion::*:*:*:hosts' hosts 'reply=(${=${${(f)\"$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) /dev/null)\"}%%[# ]*}//,/ })' #}}} #{{{ F1 计算器 arith-eval-echo() { LBUFFER=\"${LBUFFER}echo \\$(( \" RBUFFER=\" ))$RBUFFER\" } zle -N arith-eval-echo bindkey \"^[[11~\" arith-eval-echo #}}} ####{{{ function timeconv { date -d @$1 +\"%Y-%m-%d %T\" } # }}} zmodload zsh/mathfunc autoload -U zsh-mime-setup zsh-mime-setup setopt EXTENDED_GLOB #autoload -U promptinit #promptinit #prompt redhat setopt correctall autoload compinstall #漂亮又实用的命令高亮界面 setopt extended_glob TOKENS_FOLLOWED_BY_COMMANDS=(&apos;|&apos; &apos;||&apos; &apos;;&apos; &apos;&amp;&apos; &apos;&amp;&amp;&apos; &apos;sudo&apos; &apos;do&apos; &apos;time&apos; &apos;strace&apos;) recolor-cmd() { region_highlight=() colorize=true start_pos=0 for arg in ${(z)BUFFER}; do ((start_pos+=$})) ((end_pos=$start_pos+${#arg})) if $colorize; then colorize=false res=$(LC_ALL=C builtin type $arg 2&gt;/dev/null) case $res in *&apos;reserved word&apos;*) style=&quot;fg=magenta,bold&quot;;; *&apos;alias for&apos;*) style=&quot;fg=cyan,bold&quot;;; *&apos;shell builtin&apos;*) style=&quot;fg=yellow,bold&quot;;; *&apos;shell function&apos;*) style=&apos;fg=green,bold&apos;;; *&quot;$arg is&quot;*) [[ $arg = &apos;sudo&apos; ]] &amp;&amp; style=&quot;fg=red,bold&quot; || style=&quot;fg=blue,bold&quot;;; *) style=&apos;none,bold&apos;;; esac region_highlight+=(&quot;$start_pos $end_pos $style&quot;) fi [[ ${${TOKENS_FOLLOWED_BY_COMMANDS[(r)${arg//|/\\|}]}:+yes} = &apos;yes&apos; ]] &amp;&amp; colorize=true start_pos=$end_pos done } check-cmd-self-insert() { zle .self-insert &amp;&amp; recolor-cmd } check-cmd-backward-delete-char() { zle .backward-delete-char &amp;&amp; recolor-cmd } zle -N self-insert check-cmd-self-insert zle -N backward-delete-char check-cmd-backward-delete-char","tags":[{"name":"---shell ---zsh","slug":"shell-zsh","permalink":"http://yoursite.com/tags/shell-zsh/"}]},{"title":"Shell 学习","date":"2017-08-18T08:48:31.000Z","path":"2017/08/18/Shell-学习/","text":"","tags":[{"name":"shell","slug":"shell","permalink":"http://yoursite.com/tags/shell/"}]},{"title":"Xcode创建.Framework相关","date":"2017-08-01T06:56:35.000Z","path":"2017/08/01/Xcode创建Framework相关/","text":"iOS的静态库12345iOS的静态库分两种：.a和.framework; 动态库.framework静态库：链接时，静态库会被完整的复制到可执行文件中，被多次使用就有多份冗余拷贝。例如我们在程序使用友盟.a，另外一个应用也使用了友盟.a。这样整个系统里就有两个友盟.a动态库：链接时不复制，在程序运行时由系统动态加载到内存，供程序调用，系统只加载一次，多个程序共用，节省内存。系统提供的库基本上都属于此类 参考文章： IOS合并lib(.a)库的终极可用方法(可用于解决duplicate symbol静态库冲突)","tags":[{"name":"Xcode","slug":"Xcode","permalink":"http://yoursite.com/tags/Xcode/"}]},{"title":"hexo-常用命令","date":"2017-07-25T06:49:33.000Z","path":"2017/07/25/hexo-常用命令/","text":"Hexo 123npm install hexo - g #安装 npm update hexo - g #升级 hexo init #初始化 简写12345hexo n \"我的博客\" == hexo new \"我的博客\" #新建文章 hexo p == hexo publish hexo g == hexo generate#生成 hexo s == hexo server #启动服务预览 hexo d == hexo deploy#部署 服务器12345678hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。 hexo server -s #静态模式 hexo server -p 5000 #更改端口 hexo server -i 192.168.1.1 #自定义 IP hexo clean #清除缓存 网页正常情况下可以忽略此条命令 hexo g #生成静态网页 hexo d #开始部署 监视文件变动12hexo generate #使用 hexo 生成静态文件快速而且简单hexo generate --watch #监视文件变动 完成后部署123456两个命令的作用是相同的hexo generate --deployhexo deploy --generate----------------------------hexo deploy -ghexo server -g 草稿1hexo publish [layout] &lt;title&gt; 模板12345hexo new \"新文章\" #新建文章hexo new page \"新文章\" #新加页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口(默认端口4000,'ctrl + c' 关闭server)hexo deploy #将.deploy目录部署到Github 123hexo new [layout] &lt;title&gt;hexo new photo \"my gallery\"hexo new \"Hello World\" --lang tw 变量 描述 layout 布局 title 标题 date 文件简历日期 12345678title: 使用Hexo搭建个人博客layout: postdate: 2014-03-03 19:07:43comments: truecategories: Blogtags: [Hexo]keywords: Hexo, Blogdescription: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。 设置文章摘要1以上是文章摘要&lt;!--more--&gt; 以下是余下全文 写作12hexo new page &lt;title&gt;hexo new post &lt;title&gt; 变量 描述 :title 标题 :year 建立的年份（4 位数） :month 建立的月份（2 位数） :i_month 建立的月份（去掉开头的零） :day 建立的日期（2 位数） :i_day 建立的日期（去掉开头的零） 部署123hexo clean #清理hexo g #生成hexo d #部署， #可与hexo g 合并为hexo d -g 常见问题1、RSS不显示 #####安装RSS插件1npm install hexo-generator-feed --save #####开起RSS功能编辑hexo/_config.yml,添加如下代码：1rss: /atom.xml #rss地址，默认即可","tags":[{"name":"命令行","slug":"命令行","permalink":"http://yoursite.com/tags/命令行/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]}]